name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main # Triggered on PR creation or updates to PRs targeting the main branch
  push:
    branches:
      - main # Triggered only when a PR is merged into the main branch

jobs:
  integration-test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"

      - name: Install Dependencies
        working-directory: backend
        run: npm install

      - name: Make Scripts Executable
        run: |
          chmod +x backend/scripts/run-integration.sh
          chmod +x backend/scripts/wait-for-it.sh

      - name: Setup PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib
          sudo systemctl start postgresql
          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.DB_NAME }};"
          sudo -u postgres psql -c "ALTER USER ${{ secrets.DB_USER }} WITH PASSWORD '${{ secrets.DB_PASSWORD }}';"

      - name: Apply Prisma Migrations
        working-directory: backend
        run: npx prisma migrate dev --name init

      - name: Run Integration Tests
        working-directory: backend
        run: npm run test:integration

  build-artifact:
    name: Build Application Artifact
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install Dependencies & Build Application
        working-directory: backend
        run: |
          npm install
          npm run build
          zip -r backend.zip .

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact
          path: backend/backend.zip

  packer-build:
    name: Build Custom Image with Packer (AWS & GCP)
    runs-on: ubuntu-latest
    needs: build-artifact
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-artifact
          path: backend

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup GCP CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_CREDENTIALS }}

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "latest"

      - name: Initialize Packer Plugins
        env:
          PACKER_GITHUB_API_TOKEN: ${{ secrets.PACKER_GITHUB_API_TOKEN }}
        run: packer init .

      - name: Validate Packer Template
        run: packer validate machine.pkr.hcl

      - name: Build Custom Images
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GCP_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_CREDENTIALS }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          # Generate timestamp (ISO 8601 format without colons)
          BUILD_TIMESTAMP=$(date -u +"%Y%m%dT%H%M%S")

          # Run Packer build
          packer build \
            -var "build_timestamp=$BUILD_TIMESTAMP" \
            machine.pkr.hcl

          # Extract AWS AMI ID using the builder_type filter to ensure we get the amazon-ebs build
          AWS_AMI_ID=$(jq -r '.builds[] | select(.builder_type=="amazon-ebs") | .artifact_id' manifest.json | cut -d ":" -f2)
          echo "AWS_AMI_ID=$AWS_AMI_ID" >> $GITHUB_ENV

          # Define image names from secrets (simplified naming convention)
          GCP_IMAGE_NAME=$(jq -r '.builds[] | select(.builder_type=="googlecompute") | .artifact_id' manifest.json)
          echo "GCP_IMAGE_NAME=$GCP_IMAGE_NAME" >> $GITHUB_ENV

  share-images:
    name: Share AWS AMI & GCP Image with Demo Accounts/Projects
    runs-on: ubuntu-latest
    needs: packer-build
    steps:
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup GCP CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_CREDENTIALS }}

      - name: Share AWS AMI with Demo Account
        run: |
          echo "Sharing AWS AMI ${{ env.AWS_AMI_ID }} with Demo Account..."
          aws ec2 modify-image-attribute --image-id ${{ env.AWS_AMI_ID }} \
            --launch-permission "Add=[{UserId=${{ secrets.AWS_DEMO_ACCOUNT_ID }}]}"

      - name: Share GCP Image with Demo Project
        run: |
          echo "Sharing GCP Image ${{ env.GCP_IMAGE_NAME }} with Demo Project..."
          gcloud compute images add-iam-policy-binding ${{ env.GCP_IMAGE_NAME }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --member="user:${{ secrets.GCP_DEMO_ACCOUNT_EMAIL }}" \
            --role="roles/compute.imageUser"
